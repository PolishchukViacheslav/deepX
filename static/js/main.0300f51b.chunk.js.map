{"version":3,"sources":["features/reportsSlice.js","features/icons.js","components/Dashboards.js","components/TableRow.js","components/TableBody.js","app/store.js","features/functions.js","components/SortIcon.js","components/TableHeaders.js","components/Reports.js","App.js","serviceWorker.js","index.js"],"names":["getReports","createAsyncThunk","endpoint","a","fetch","fetchPromise","json","results","reportsSlice","createSlice","name","initialState","initValue","valueForSort","airportSort","gateSort","dateSort","turnsSort","categorySort","timeSort","taskSort","passSort","isLoading","reducers","setReports","state","action","payload","setValueForSort","setAirportSort","setGateSort","setDateSort","setTurnsSort","setCategorySort","setTimeSort","setTaskSort","setPassSort","setIsLoading","extraReducers","fulfilled","pending","rejected","actions","selectValueForSort","reports","selectAirportSort","selectGateSort","selectDateSort","selectTurnsSort","selectCategorySort","selectTimeSort","selectTaskSort","selectPassSort","arrowDown","viewBox","focusable","className","data-icon","width","height","fill","aria-hidden","d","arrowRight","version","xmlns","x","y","points","Dashboards","TableRow","props","airport","gate","date","turns","category","time","task","pass","video","type","checked","disabled","href","TableBody","data","useSelector","map","rec","key","id","configureStore","reducer","reportsReducer","textSort","array","sortType","compare","nextSortType","collator","Intl","Collator","sensitivity","store","dispatch","sort","itemA","itemB","SortIcon","isRotate","transform","TableHeaders","useDispatch","airportSortType","isAirportRotate","gateSortType","isGateRotate","categorySortType","isCategoryRotate","taskSortType","isTaskRotate","turnsSortType","isTurnsRotate","dateSortType","isDateRotate","timeSortType","isTimeRotate","passSortType","isPassRotate","onClick","sortedData","dateA","Date","dateB","numberSort","timeA","timeB","Reports","App","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0300f51b.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const getReports = createAsyncThunk('reports/getReports', async (endpoint) => {\r\n  const fetchPromise = await fetch(endpoint);\r\n  const results = await fetchPromise.json();\r\n  return results;\r\n  } \r\n);\r\n\r\nexport const reportsSlice = createSlice({\r\n  name: 'reports',\r\n  initialState: {\r\n    initValue: [],\r\n    valueForSort: [],\r\n    airportSort: null,\r\n    gateSort: null,\r\n    dateSort: null,\r\n    turnsSort: null,\r\n    categorySort: null,\r\n    timeSort: null,\r\n    taskSort: null,\r\n    passSort: null,\r\n    isLoading: false,\r\n  },\r\n  reducers: {\r\n    setReports: (state, action) => {\r\n      return {\r\n        ...state,\r\n        initValue: action.payload,\r\n      }\r\n    },\r\n    setValueForSort: (state,action) => {\r\n      return {\r\n        ...state,\r\n        valueForSort: action.payload,\r\n      }\r\n    },\r\n    setAirportSort: (state,action) => {\r\n      return {\r\n        ...state,\r\n        airportSort: action.payload,\r\n        gateSort: null,\r\n        dateSort: null,\r\n        turnsSort: null,\r\n        categorySort: null,\r\n        timeSort: null,\r\n        taskSort: null,\r\n        passSort: null,\r\n      }\r\n    },\r\n    setGateSort: (state,action) => {\r\n      return {\r\n        ...state,\r\n        gateSort: action.payload,\r\n        airportSort: null,\r\n        dateSort: null,\r\n        turnsSort: null,\r\n        categorySort: null,\r\n        timeSort: null,\r\n        taskSort: null,\r\n        passSort: null,\r\n      }\r\n    },\r\n    setDateSort: (state,action) => {\r\n      return {\r\n        ...state,\r\n        dateSort: action.payload,\r\n        airportSort: null,\r\n        gateSort: null,\r\n        turnsSort: null,\r\n        categorySort: null,\r\n        timeSort: null,\r\n        taskSort: null,\r\n        passSort: null,\r\n      }\r\n    },\r\n    setTurnsSort: (state, action) => {\r\n      return {\r\n        ...state,\r\n        turnsSort: action.payload,\r\n        airportSort: null,\r\n        gateSort: null,\r\n        dateSort: null,\r\n        categorySort: null,\r\n        timeSort: null,\r\n        taskSort: null,\r\n        passSort: null,\r\n      }\r\n    },\r\n    setCategorySort: (state, action) => {\r\n      return {\r\n        ...state,\r\n        categorySort: action.payload,\r\n        airportSort: null,\r\n        gateSort: null,\r\n        dateSort: null,\r\n        turnsSort: null,\r\n        timeSort: null,\r\n        taskSort: null,\r\n        passSort: null,\r\n      }\r\n    },\r\n    setTimeSort: (state, action) => {\r\n      return {\r\n        ...state,\r\n        timeSort: action.payload,\r\n        airportSort: null,\r\n        gateSort: null,\r\n        dateSort: null,\r\n        turnsSort: null,\r\n        categorySort: null,\r\n        taskSort: null,\r\n        passSort: null,\r\n      }\r\n    },\r\n    setTaskSort: (state, action) => {\r\n      return {\r\n        ...state,\r\n        taskSort: action.payload,\r\n        airportSort: null,\r\n        gateSort: null,\r\n        dateSort: null,\r\n        turnsSort: null,\r\n        categorySort: null,\r\n        timeSort: null,\r\n        passSort: null,\r\n      }\r\n    },\r\n    setPassSort: (state, action) => {\r\n      return {\r\n        ...state,\r\n        passSort: action.payload,\r\n        airportSort: null,\r\n        gateSort: null,\r\n        dateSort: null,\r\n        turnsSort: null,\r\n        categorySort: null,\r\n        timeSort: null,\r\n        taskSort: null,\r\n      }\r\n    },\r\n    setIsLoading: (state, action) => {\r\n      return {\r\n        ...state,\r\n        isLoading: action.payload,\r\n      }\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [getReports.fulfilled]: (state, action) => {\r\n      return {\r\n        ...state,\r\n        initValue: action.payload,\r\n        valueForSort: action.payload,\r\n        isLoading: false,\r\n      }\r\n    },\r\n    [getReports.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n    [getReports.rejected]: (state) => {\r\n      state.isLoading = false;\r\n    },\r\n  }\r\n});\r\n\r\nexport const { setReports, setIsLoading, setPassSort, setTaskSort, setTimeSort, setCategorySort, setValueForSort, setAirportSort, setGateSort, setDateSort, setTurnsSort } = reportsSlice.actions;\r\n\r\nexport const selectInitValue = state => state.reports.initValue;\r\nexport const selectValueForSort = state => state.reports.valueForSort;\r\nexport const selectAirportSort = state => state.reports.airportSort;\r\nexport const selectGateSort = state => state.reports.gateSort;\r\nexport const selectDateSort = state => state.reports.dateSort;\r\nexport const selectTurnsSort = state => state.reports.turnsSort;\r\nexport const selectCategorySort = state => state.reports.categorySort;\r\nexport const selectTimeSort = state => state.reports.timeSort;\r\nexport const selectTaskSort = state => state.reports.taskSort;\r\nexport const selectPassSort = state => state.reports.passSort;\r\n\r\nexport default reportsSlice.reducer;\r\n","import React from 'react';\n\nexport const arrowDown = <svg viewBox=\"0 0 1024 1024\" focusable=\"false\" className=\"\" data-icon=\"caret-down\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z\"></path></svg>;\nexport const arrowRight = <svg version=\"1.1\" width=\"0.5em\" height=\"0.5em\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\nviewBox=\"0 0 59.414 59.414\" >\n<polygon points=\"15.561,0 14.146,1.414 42.439,29.707 14.146,58 15.561,59.414 45.268,29.707 \"/>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n</svg>;","import React from 'react';\nimport { arrowDown, arrowRight } from '../features/icons';\nimport './Dashboards.css';\n\nexport const Dashboards = () => {\n  return (\n    <div className=\"body__dashboards dashboards\">\n      <div className=\"dashboards__item\">Dashboard</div>\n      <div className=\"dashboards__item\">\n        <div>Reports<span>{arrowDown}</span></div>\n        <div><span>{arrowRight}</span>Performance</div>\n        <div className=\"dashboards__item--active\"><span>{arrowRight}</span>Monitoring</div>\n        <div><span>{arrowRight}</span>Executive</div>\n      </div>\n      <div className=\"dashboards__item\">Cams</div>\n      <div className=\"dashboards__item\">Alerts</div>\n      <div className=\"dashboards__item\">Settings</div>\n    </div>\n  )\n};\n","import React from 'react'\n\nexport const TableRow = (props) => {\n  const { airport,\n    gate,\n    date,\n    turns,\n    category, \n    time, \n    task, \n    pass, \n    video, \n  } = props;\n\n  return (\n    <tr className={pass ? 'table__item' : 'table__item--active'}>\n      <td className=\"table__data\"><span className=\"table__row\">{airport}</span></td>\n      <td className=\"table__data\"><span className=\"table__row\">{gate}</span></td>\n      <td className=\"table__data\"><span className=\"table__row\">{date}</span></td>\n      <td className=\"table__data\"><span className=\"table__row\">{turns}</span></td>\n      <td className=\"table__data\"><span className=\"table__row\">{category}</span></td>\n      <td className=\"table__data\"><span className=\"table__row\">{time}</span></td>\n      <td className=\"table__data\"><span className=\"table__row\">{task}</span></td>\n      <td className=\"table__data\"><input type=\"checkbox\"  checked={pass} disabled className=\"table__row\" /></td>\n      <td className=\"table__data\"><a href={video} className=\"table__row\">Link</a></td>\n    </tr>\n  )\n};\n","import React from 'react'\nimport { useSelector } from 'react-redux';\nimport { selectValueForSort } from '../features/reportsSlice';\nimport { TableRow } from './TableRow';\n\nexport const TableBody = () => {\n  const data = useSelector(selectValueForSort);\n  \n\n  return (\n    <tbody>\n      {data?.map(rec => <TableRow key={rec.id} {...rec} />)}\n    </tbody>\n  )\n};\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport reportsReducer from '../features/reportsSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    reports: reportsReducer,\r\n  },\r\n});\r\n","import store from \"../app/store\";\nimport { setAirportSort, setCategorySort, setDateSort, setGateSort, setPassSort, setTaskSort, setTimeSort, setTurnsSort } from \"./reportsSlice\";\n\n/**\n * \n * @param {Array} array to sort\n * @param {String} sortType asc or desc \n * @param {String} compare key\n */\nexport const textSort = (array, sortType, compare) => {\n  const nextSortType = (sortType !== 'asc') ? 'asc' : 'desc';\n  const collator = new Intl.Collator({ sensitivity: 'base' });\n\n  switch (compare) {\n    case 'airport': \n      store.dispatch(setAirportSort(nextSortType));\n      break;\n    case 'gate':\n      store.dispatch(setGateSort(nextSortType));\n      break;\n    case 'category': \n      store.dispatch(setCategorySort(nextSortType));\n      break;\n    case 'task': \n      store.dispatch(setTaskSort(nextSortType));\n      break;\n    default: break;\n  }\n  \n  return [...array].sort(\n    (itemA, itemB) => {\n\n      if (sortType !== 'asc') {\n        \n        return collator.compare(itemA[compare], itemB[compare]);\n      };\n\n      if (sortType === 'asc') {\n\n        return collator.compare(itemB[compare], itemA[compare]);\n      }\n      \n      return 0;\n    });\n}\n\nexport const numberSort = (array, sortType, compare) => { \n  const nextSortType = (sortType !== 'asc') ? 'asc' : 'desc';\n\n\n  store.dispatch(setTurnsSort(nextSortType));\n\n  return [...array].sort(\n    (itemA, itemB) => {\n\n      if (sortType !== 'asc') {\n        \n        return itemB[compare] - itemA[compare];\n      };\n\n      if (sortType === 'asc') {\n\n        return itemA[compare] - itemB[compare];\n      }\n      \n      return 0;\n    });\n}\n\n/**\n * \n * @param {Array} array \n * @param {String} sortType asc or desc\n * @param {String} compare key \n */\nexport const dateSort = (array, sortType, compare) => {\n\n  const nextSortType = (sortType !== 'asc') ? 'asc' : 'desc';\n\n  store.dispatch(setDateSort(nextSortType));\n\n  return [...array].sort(\n    (itemA, itemB) => {\n      const dateA = new Date(itemA[compare]);\n      const dateB = new Date(itemB[compare]);\n\n      if (sortType !== 'asc') {\n\n        return dateB - dateA;\n      }\n\n      if (sortType === 'asc') {\n\n        return dateA - dateB;\n      }\n\n      return 0;\n  });\n};\n\nexport const timeSort = (array, sortType, compare) => {\n  const nextSortType = (sortType !== 'asc') ? 'asc' : 'desc';\n\n  store.dispatch(setTimeSort(nextSortType));\n\n  return [...array].sort(\n    (itemA, itemB) => {\n      const timeA = new Date (`04/29/1987 ${itemA[compare]}`);\n      const timeB = new Date (`04/29/1987 ${itemB[compare]}`);\n\n      if (sortType !== 'asc') {\n\n        return timeB - timeA;\n      }\n\n      if (sortType === 'asc') {\n\n        return timeA - timeB;\n      }\n\n      return 0;\n    }\n  );\n};\n\nexport const passSort = (array, sortType, compare) => {\n  const nextSortType = (sortType !== 'asc') ? 'asc' : 'desc';\n\n  store.dispatch(setPassSort(nextSortType));\n\n  return [...array].sort(\n    (itemA, itemB) => {\n\n      if (sortType !== 'asc') {\n\n        return itemA[compare] === itemB[compare] ? 0 : itemA[compare] ? -1 : 1;\n      }\n\n      if (sortType === 'asc') {\n\n        return itemA[compare] === itemB[compare] ? 0 : itemA[compare] ? 1 : -1;\n      }\n      return 0;\n    }\n  );\n};","import React from 'react'\n\nexport const SortIcon = ({ isRotate }) => {\n  return (\n    <>\n      <svg viewBox=\"0 0 1024 1024\" focusable=\"false\" transform={isRotate ? 'rotate(180)' : null} data-icon=\"caret-down\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z\"></path></svg>\n    </>\n  )\n};\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { dateSort, numberSort, passSort, textSort, timeSort } from '../features/functions';\nimport { arrowDown } from '../features/icons';\nimport { selectValueForSort, selectAirportSort, setValueForSort, selectGateSort, selectCategorySort, selectTaskSort, selectTurnsSort, selectDateSort, selectTimeSort, selectPassSort } from '../features/reportsSlice';\nimport { SortIcon } from './SortIcon';\n// import { useSelector } from 'react-redux';\n\nexport const TableHeaders = () => {\n  const dispatch = useDispatch();\n  const data = useSelector(selectValueForSort);\n\n  const airportSortType = useSelector(selectAirportSort) || 'desc';\n  const isAirportRotate = airportSortType === 'asc' ? true : false;\n  const gateSortType = useSelector(selectGateSort);\n  const isGateRotate = gateSortType === 'asc' ? true : false;\n  const categorySortType = useSelector(selectCategorySort);\n  const isCategoryRotate = categorySortType === 'asc' ? true : false;\n  const taskSortType = useSelector(selectTaskSort);\n  const isTaskRotate = taskSortType === 'asc' ? true : false;\n  const turnsSortType = useSelector(selectTurnsSort);\n  const isTurnsRotate = turnsSortType === 'asc' ? true : false;\n  const dateSortType = useSelector(selectDateSort);\n  const isDateRotate = dateSortType === 'asc' ? true : false;\n  const timeSortType = useSelector(selectTimeSort);\n  const isTimeRotate = timeSortType === 'asc' ? true : false;\n  const passSortType = useSelector(selectPassSort);\n  const isPassRotate = passSortType === 'asc' ? true : false;\n  \n\n\n  const handleAirportSort = () => {\n\n    const sortedData = textSort(data, airportSortType, 'airport');\n    dispatch(setValueForSort(sortedData));\n  };\n\n  const handleGateSort = () => {\n\n    const sortedData = textSort(data, gateSortType, 'gate');\n    dispatch(setValueForSort(sortedData));\n  };\n\n  const handleCategorySort = () => {\n\n    const sortedData = textSort(data, categorySortType, 'category');\n    dispatch(setValueForSort(sortedData));\n  };\n\n  const handleTaskSort = () => {\n\n    const sortedData = textSort(data, taskSortType, 'task');\n    dispatch(setValueForSort(sortedData));\n  };\n\n  const handleTurnsSort = () => {\n\n    const sortedData = numberSort(data, turnsSortType, 'turns');\n    dispatch(setValueForSort(sortedData));\n  };\n\n  const handleDateSort = () => {\n\n    const sortedData = dateSort(data, dateSortType, 'date');\n    dispatch(setValueForSort(sortedData));\n  };\n\n  const handleTimeSort = () => {\n\n    const sortedData = timeSort(data, timeSortType, 'time');\n    dispatch(setValueForSort(sortedData));\n  };\n\n  const handlePassSort = () => {\n\n    const sortedData = passSort(data, passSortType, 'pass');\n    dispatch(setValueForSort(sortedData));\n  };\n\n  return (\n    <>\n      <th className=\"table__header\" onClick={handleAirportSort}>\n        <span>Airport</span>\n        <span className=\"table__icon\">\n          <SortIcon  isRotate={isAirportRotate} />\n        </span></th>\n      <th className=\"table__header\" onClick={handleGateSort}>\n        <span>Gate</span>\n        <span className=\"table__icon\">\n          <SortIcon  isRotate={isGateRotate} />\n        </span>\n      </th>\n      <th className=\"table__header\" onClick={handleDateSort}>\n        <span>Date</span>\n        <span className=\"table__icon\">\n          <SortIcon isRotate={isDateRotate} />\n        </span></th>\n      <th className=\"table__header\" onClick={handleTurnsSort}>\n        <span>Turns</span>\n        <span className=\"table__icon\">\n          <SortIcon isRotate={isTurnsRotate} />\n        </span></th>\n      <th className=\"table__header\" onClick={handleCategorySort}>\n        <span>Category</span>\n        <span className=\"table__icon\">\n        <SortIcon  isRotate={isCategoryRotate} />\n        </span></th>\n      <th className=\"table__header\" onClick={handleTimeSort}>\n        <span>Time</span>\n        <span className=\"table__icon\">\n          <SortIcon isRotate={isTimeRotate} />\n        </span></th>\n      <th className=\"table__header\" onClick={handleTaskSort}>\n        <span>Task</span>\n        <span className=\"table__icon\">\n          <SortIcon isRotate={isTaskRotate} />\n        </span></th>\n      <th className=\"table__header\" onClick={handlePassSort}>\n        <span>Pass</span>\n        <span className=\"table__icon\">\n          <SortIcon isRotate={isPassRotate}/>\n        </span></th>\n      <th className=\"table__header\"><span>Video</span><span className=\"table__icon\">{arrowDown}</span></th>\n    </>\n  )\n};\n","import React from 'react';\nimport './Reports.css';\nimport { TableBody } from './TableBody';\nimport { TableHeaders } from './TableHeaders';\n\nexport const Reports = () => {\n  return (\n    <div className=\"body__reports reports\">\n      <div>\n        <h2 className=\"reports__title\">Reports Search response:</h2>\n        <div className=\"reports__wrapper\">\n          <table className=\"reports__table table\">\n            <thead>\n              <tr>\n                <TableHeaders />\n              </tr>\n            </thead>\n            <TableBody />\n          </table>\n        </div>\n      </div>\n    </div>\n  )\n};\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport data from './features/deepX.json'\r\nimport { getReports, setReports, setValueForSort } from './features/reportsSlice';\r\nimport { useDispatch } from 'react-redux';\r\nimport { URL } from './features/api_config';\r\nimport { Dashboards } from './components/Dashboards';\r\nimport { Reports } from './components/Reports';\r\n\r\nexport const App = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n\r\n    // dispatch(getReports(URL));\r\n    dispatch(setReports(data));\r\n    dispatch(setValueForSort(data));\r\n  })\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"App__header\">DeepX Analytics</h1>\r\n      <div className=\"App__body body\">\r\n        <Dashboards />\r\n        <Reports />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}